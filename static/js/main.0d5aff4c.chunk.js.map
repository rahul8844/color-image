{"version":3,"sources":["utils/constants.js","utils/util.js","components/ImageFormation.jsx","App.js","reportWebVitals.js","index.js"],"names":["IMAGE_SIZE","getImageUrl","colors","canvas","createCanvas","ctx","getContext","imgData","createImageData","step","data","length","COLOR_DIVISION","i","cPos","putImageData","toDataURL","ImageFormation","props","colorPoints","push","RANGE","forEach","r","g","b","id","src","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iLACaA,G,WACF,KADEA,EAED,I,OCCCC,EAAc,SAACC,GAaxB,IAVA,IAAMC,EAASC,uBAAaJ,EAAkBA,GAGxCK,EAAMF,EAAOG,WAAW,MAGxBC,EAAUF,EAAIG,gBAAgBR,EAAkBA,GAEhDS,EAAOF,EAAQG,KAAKC,ODRFC,MCUfC,EAAI,EAAGA,EAAIN,EAAQG,KAAKC,OAAQE,GAAKJ,EAAM,CAChD,IAAMK,EAAOD,EAAIJ,EAEjBF,EAAQG,KAAKG,GAAKX,EAAOY,GAAM,GAC/BP,EAAQG,KAAKG,EAAI,GAAKX,EAAOY,GAAM,GACnCP,EAAQG,KAAKG,EAAI,GAAKX,EAAOY,GAAM,GACnCP,EAAQG,KAAKG,EAAI,GAAK,IAG1B,OADAR,EAAIU,aAAaR,EAAS,EAAG,GACtBJ,EAAOa,a,OCCHC,EAvBO,SAACC,GAInB,IAHA,IAAMC,EAAc,GACdjB,EAAS,GAENW,EAAI,EAAGA,GFHU,GEGWA,IACjCM,EAAYC,KFDKC,EECAR,EAAc,GAWnC,OAPAM,EAAYG,SAAQ,SAAAC,GAChBJ,EAAYG,SAAQ,SAAAE,GAChBL,EAAYG,SAAQ,SAAAG,GAChBvB,EAAOkB,KAAK,CAACG,EAAGC,EAAGC,aAK3B,qBAAKC,GAAG,aAAR,SACI,qBAAKC,IAAK1B,EAAYC,QCRnB0B,MAXf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,qDACA,cAAC,EAAD,UCIOC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.0d5aff4c.chunk.js","sourcesContent":["/** Default Image Size*/\r\nexport const IMAGE_SIZE={\r\n    width: 256,\r\n    height: 128\r\n};\r\nexport const COLOR_DIVISION = 32;\r\nexport const RANGE = 256;\r\nexport const TOTAL_COLORS = COLOR_DIVISION * COLOR_DIVISION * COLOR_DIVISION;\r\nexport const STEP_DIFF = RANGE / COLOR_DIVISION;\r\n","import { createCanvas } from 'canvas';\r\nimport { IMAGE_SIZE, TOTAL_COLORS } from './constants';\r\n\r\n/* getImage Url generates Image based on colors passed in params */ \r\nexport const getImageUrl = (colors) => {\r\n\r\n    // Creating Canvas for image with width-256px and height-128px\r\n    const canvas = createCanvas(IMAGE_SIZE.width, IMAGE_SIZE.height);    \r\n\r\n    // taking context of generated canvas\r\n    const ctx = canvas.getContext('2d');      \r\n    \r\n    // creating Image with No color and same size\r\n    const imgData = ctx.createImageData(IMAGE_SIZE.width, IMAGE_SIZE.height);  \r\n\r\n    const step = imgData.data.length/TOTAL_COLORS;\r\n    // console.log('imgData',imgData);\r\n    for (let i = 0; i < imgData.data.length; i += step) {  // Filling colors in Image\r\n        const cPos = i / step;\r\n        // console.log('lastPos', i)\r\n        imgData.data[i] = colors[cPos][0];\r\n        imgData.data[i + 1] = colors[cPos][1];\r\n        imgData.data[i + 2] = colors[cPos][2];\r\n        imgData.data[i + 3] = 255;\r\n    }\r\n    ctx.putImageData(imgData, 0, 0);                // Putting Image to the canvas so we can get image url\r\n    return canvas.toDataURL();                      // return image url with filled color\r\n}","import { COLOR_DIVISION, STEP_DIFF } from \"../utils/constants\";\r\nimport { getImageUrl } from \"../utils/util\";\r\n\r\n/** Image Component */\r\nconst ImageFormation =(props)=>{\r\n    const colorPoints = [];\r\n    const colors = [];\r\n    /** Finding equally disributed numbers which lies in range 0 - 255 */\r\n    for (let i = 1; i <= COLOR_DIVISION; i++) {\r\n        colorPoints.push(i*STEP_DIFF - 1 );\r\n    }\r\n\r\n    /** Getting all the colors which can be made from above 32 r g b combination */\r\n    colorPoints.forEach(r => {\r\n        colorPoints.forEach(g => {\r\n            colorPoints.forEach(b => {\r\n                colors.push([r, g, b]);\r\n            });\r\n        })\r\n    });\r\n    return(\r\n        <div id=\"image-html\">\r\n            <img src={getImageUrl(colors)}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ImageFormation;","import './App.css';\nimport ImageFormation from './components/ImageFormation';\n\nfunction App() { \n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h2>Unique Colors Image</h2>\n        <ImageFormation />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}